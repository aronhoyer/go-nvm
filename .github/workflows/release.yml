name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Git tag to build'
        required: true
        type: string

  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  prepare:
    name: Prepare Release Context
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.set-version-dispatch.outputs.version || steps.set-version-push.outputs.version }}
      commit: ${{ steps.set-commit.outputs.commit }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set Version and Checkout Tag (Manual Trigger)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: set-version-dispatch
        run: |
          git fetch --tags
          git checkout ${{ inputs.tag }}
          echo "version=${{ inputs.tag }}" >> $GITHUB_OUTPUT

      - name: Set Version and Checkout Tag (Push Event)
        if: ${{ github.event_name == 'push' }}
        id: set-version-push
        run: |
          VERSION="${GITHUB_REF##*/}"
          git fetch --tags
          git checkout "$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Extract Commit Hash
        id: set-commit
        run: |
          COMMIT=$(git rev-parse --short HEAD)
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT

  build:
    name: Build and Package (${{ matrix.goos }}-${{ matrix.goarch }})
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Build and Package
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          COMMIT_SHA: ${{ needs.prepare.outputs.commit }}
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p out
          output_name="nvm"
          if [ "$GOOS" = "windows" ]; then
            output_name="nvm.exe"s
          fi

          build_dir="package-${GOOS}-${GOARCH}"
          mkdir -p "$build_dir"

          GOOS=$GOOS GOARCH=$GOARCH go build -ldflags "-X main.version=${VERSION} -X main.commitSha=${COMMIT_SHA}" -o "$build_dir/$output_name" ./cmd/nvm

          cp ./env.sh "$build_dir/env"

          if [ "$GOOS" = "windows" ]; then
            zip -rj "out/nvm.${GOOS}-${GOARCH}.zip" "$build_dir"/*
          else
            tar -czf "out/nvm.${GOOS}-${GOARCH}.tar.gz" -C "$build_dir" .
          fi

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nvm.${{ matrix.goos }}-${{ matrix.goarch }}
          path: out/*

  release:
    name: Publish GitHub Release
    needs: [prepare, build]
    runs-on: ubuntu-latest

    steps:
      - name: Debug Pre-release Condition
        run: |
          echo "Evaluating prerelease status for version: ${{ needs.prepare.outputs.version }}"
          echo "Pre-release: ${{ contains(needs.prepare.outputs.version, '-alpha') || contains(needs.prepare.outputs.version, '-beta') || contains(needs.prepare.outputs.version, '-rc') }}"

      - name: Download All Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: out

      - name: Flatten Artifact Directory
        run: |
          mkdir -p release
          find out -type f -exec mv {} release/ \;

      - name: Upload Release Archives (Manual Trigger)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          files: release/*
          prerelease: ${{ contains(needs.prepare.outputs.version, '-beta') || contains(needs.prepare.outputs.version, '-rc') || contains(needs.prepare.outputs.version, '-alpha') }}

      - name: Upload Release Archives (Push Event)
        if: ${{ github.event_name == 'push' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          files: release/*
          prerelease: ${{ contains(needs.prepare.outputs.version, '-beta') || contains(needs.prepare.outputs.version, '-rc') || contains(needs.prepare.outputs.version, '-alpha') }}

